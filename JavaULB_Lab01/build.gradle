

def LAB_NAME = "Lab01"



// Maven stuff...
description = 'JavaULB_Lab01'
group = "com.objy.javaulb.labs.lab01"
version = '1.0.0'




//-----------------------------------------------------
// Set version values here...
//-----------------------------------------------------
ext.igVersion       = rootProject.igVersion
ext.objyVersion     = rootProject.objyVersion
ext.objyinstalldir  = rootProject.objyinstalldir 
ext.objyHome        = rootProject.objyHome 


println("igVersion             = $igVersion")
println("objyVersion           = $objyVersion")
println("objyinstalldir        = $objyinstalldir")
println("objyHome              = $objyHome")




def xPROJECT_DIR        = "" + getProjectDir()
def PROJECT_DIR		= xPROJECT_DIR.replaceAll("\\\\", "/")

def LIB_DIR		= PROJECT_DIR + "/build/libs/"
def TEMP_DIR 		= PROJECT_DIR+"/tmp/"

def SCHEMA_FILE		= PROJECT_DIR+"/data/"+LAB_NAME+".schema"

def PMD_FILE            = PROJECT_DIR+"/data/"+LAB_NAME+".pmd"

def BOOTFILE_FULLPATH
def BOOTFILE_DIR

if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    //---------------------------------------
    // Windows values here...
    //---------------------------------------
    BOOTFILE_DIR = "${PROJECT_DIR}/data/dbs"
    BOOTFILE_FULLPATH = "${BOOTFILE_DIR}/${LAB_NAME}.boot"
    PMD_FILE = "${PROJECT_DIR}/config/win/${LAB_NAME}.pmd"
} else {
    //---------------------------------------
    // Non-Windows values here...
    //---------------------------------------
    //	BOOTFILE_DIR = "/NVMe/thingspan/dbs${DEPLOY_VERSION}"
    BOOTFILE_DIR = "${PROJECT_DIR}/data/dbs"
    BOOTFILE_FULLPATH = "${BOOTFILE_DIR}/${LAB_NAME}.boot"
    PMD_FILE = PROJECT_DIR+"/config/linux/${LAB_NAME}.pmd"
}


//==================================
// FD Variables
//==================================
def fdname           = project.hasProperty('fdname')            ? project.fdname            : 'Lab01'
def fddirhost        = project.hasProperty('fddirhost')         ? project.fddirhost         : InetAddress.getLocalHost().getHostName()
def fddirpath        = project.hasProperty('fddirpath')         ? project.fddirpath         : "${BOOTFILE_DIR}"
def jnldirhost       = project.hasProperty('jnldirhost')        ? project.jnldirhost        : InetAddress.getLocalHost().getHostName()
def jnldirpath       = project.hasProperty('jnldirpath')        ? project.jnldirpath        : "${fddirpath}" + "/jnl"
def bootfile		 = "${fddirpath}/${fdname}.boot"
// When expressing the full, UNC path the "${fddirhost}::" causes havoc on Windows/DOS.

print("project.ext.objydbCoreJar = ${objydbCoreJar}")

dependencies {
    implementation files(objydbCoreJar)
    implementation 'org.slf4j:slf4j-api:1.8.0-beta1'
    implementation 'org.slf4j:slf4j-log4j12:1.8.0-beta1'
    implementation 'log4j:log4j:1.2.17'
}

assemble.dependsOn("shadowJar")

shadowJar {
    configurations = [project.configurations.compileClasspath]
    zip64 true
}




//==================================
// Tasks
//==================================



task cb(type: GradleBuild) {
    group = "JavaULB_Lab01"
    description = "Clean and Build."
    tasks = [ 'clean', 'build' ]
}


// Create FD
task recreateFD(){
    group = "JavaULB_Lab01"
    description = "Recreate the federation."
    doLast{
        makeDir(fddirpath)
        makeDir(jnldirpath)

        // TODO: Check lockserver

        // cleanup fd
        exec {
            commandLine mycmd,  myflag, "objy cleanupFD -local -bootfile ${bootfile}"
            ignoreExitValue = true
        }

        // Delete FD
        exec {
            commandLine mycmd,  myflag, "objy deletefd -bootfile ${bootfile}"
            ignoreExitValue = true
        }

        // Create FD
        exec {
            commandLine mycmd,  myflag, "objy createfd -fdname ${fdname} -fdDirHost ${fddirhost} -fdDirPath ${fddirpath} -jnlDirHost ${jnldirhost} -jnlDirPath ${jnldirpath}"
            ignoreExitValue = true
        }
    }
}



// Load the schema into the federation.
task loadSchema () {
    group = "JavaULB_Lab01"
    description = "Load the schema into the federation."

    doLast{
        println("Loading core schema file: ${SCHEMA_FILE}")
        exec {
            commandLine mycmd, myflag, "objy DO -infile ${SCHEMA_FILE} -bootfile ${bootfile}"
            ignoreExitValue = true
        }

    }
}




def appClassPath = "${LIB_DIR}/JavaULB_${LAB_NAME}-1.0.0-all.jar"
//println("appClassPath = ${appClassPath}")

task run01() {

    group = "JavaULB_Lab01"
    description = "Run Lab01."

    doLast{
	println("Running 'run01'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${appClassPath}")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            mainClass = "com.objy.javaulb.labs.lab01.Lab01"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}



def makeDir(dirPath){
    def folder = new File(dirPath)
    if(!folder.exists()){
        folder.mkdirs()
    }
}


// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
//if (!hasProperty('mainClass')) {
//    ext.mainClass = 'com.objy.javaulb.labs.lab01.Lab01'
//}
