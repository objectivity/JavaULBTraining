


def LAB_NAME = "Lab02"

def version = "0.1"


// Java source settings
sourceCompatibility = '1.8'
sourceSets.main.java.srcDirs = ['src/main/java']



def xPROJECT_DIR        = "" + getProjectDir()
def PROJECT_DIR		= xPROJECT_DIR.replaceAll("\\\\", "/")

def LIB_DIR		= PROJECT_DIR + "/build/libs/"
def TEMP_DIR 		= PROJECT_DIR+"/tmp/"

def SCHEMA_FILE		= PROJECT_DIR+"/data/"+LAB_NAME+".schema"

def PMD_FILE            = PROJECT_DIR+"/data/"+LAB_NAME+".pmd"

def BOOTFILE_FULLPATH
def BOOTFILE_DIR

if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    //---------------------------------------
    // Windows values here...
    //---------------------------------------
    BOOTFILE_DIR = "${PROJECT_DIR}/data/dbs"
    BOOTFILE_FULLPATH = "${BOOTFILE_DIR}/${LAB_NAME}.boot"
    PMD_FILE = "${PROJECT_DIR}/config/win/${LAB_NAME}.pmd"
} else {
    //---------------------------------------
    // Non-Windows values here...
    //---------------------------------------
    //	BOOTFILE_DIR = "/NVMe/thingspan/dbs${DEPLOY_VERSION}"
    BOOTFILE_DIR = "${PROJECT_DIR}/data/dbs"
    BOOTFILE_FULLPATH = "${BOOTFILE_DIR}/${LAB_NAME}.boot"
    PMD_FILE = PROJECT_DIR+"/config/linux/${LAB_NAME}.pmd"
}


//==================================
// FD Variables
//==================================
def fdname           = project.hasProperty('fdname')            ? project.fdname            : "${LAB_NAME}"
def fddirhost        = project.hasProperty('fddirhost')         ? project.fddirhost         : InetAddress.getLocalHost().getHostName()
def fddirpath        = project.hasProperty('fddirpath')         ? project.fddirpath         : "${BOOTFILE_DIR}"
def jnldirhost       = project.hasProperty('jnldirhost')        ? project.jnldirhost        : InetAddress.getLocalHost().getHostName()
def jnldirpath       = project.hasProperty('jnldirpath')        ? project.jnldirpath        : "${fddirpath}" + "/jnl"
def bootfile		 = "${fddirpath}/${fdname}.boot"
// When expressing the full, UNC path the "${fddirhost}::" causes havoc on Windows/DOS.




project (':JavaULB_Lab02') {
    dependencies {
        // Third party dependency
        compile files("$objyHome/lib/objydb-core-${objyVersion}.jar")

        compile 'org.slf4j:slf4j-api:1.8.0-beta1'
        compile 'org.slf4j:slf4j-log4j12:1.8.0-beta1'
        compile 'log4j:log4j:1.2.17'
    }

    // Start shadowJar task before test phase
    test.dependsOn("shadowJar")


    // Configure the shadow jar task
    shadowJar {
        zip64 true
        dependencies {
            include(dependency('com.objy.objydb:objydb-core:.*'))

            include(dependency('org.slf4j:slf4j-api:1.8.0-beta1'))
            include(dependency('org.slf4j:slf4j-log4j12:1.8.0-beta1'))
            include(dependency('log4j:log4j:1.2.17'))
        }
    }
}




//==================================
// Tasks
//==================================

task envVars () {
    doLast {
        println("------------------------------------------")
        println("objyHome     = $objyHome")
        println("PROJECT_DIR   = $PROJECT_DIR")
//        println("BUILD_DIR    = $BUILD_DIR")
	println("fdname       = $fdname")
	println("fddirhost    = $fddirhost")
	println("fddirpath    = $fddirpath")
        println("jnldirpath    = jnldirpath")
        println("bootfile     = $bootfile")
        println("------------------------------------------")
    }
}



task cb(type: GradleBuild) {
    tasks = [ 'clean', 'build' ]
}

/*
def fileExists(filePath){
    println("fileExists()...");
    def file = new File(filePath)
    if(!file.exists()){
        return false;
    }
}


task cleanupFD() {
    onlyIf {
        fileExists($bootfile)
    }

    doLast {
        println "cleanupFD task ran."
    }

}
*/


// Create FD
task recreateFD(){
    doLast{
        makeDir(fddirpath)
        makeDir(jnldirpath)

	println "fddirhost is  ${fddirhost}"
	println "fddirpath is  ${fddirpath}"
	println "fdname is     ${fdname}"
	println "bootfile is   ${bootfile}"


        // TODO: Check lockserver

        // cleanup fd
        exec {
            commandLine mycmd,  myflag, "objy cleanupFD -local -bootfile ${bootfile}"
            ignoreExitValue = true
        }

        // Delete FD
        exec {
            commandLine mycmd,  myflag, "objy deletefd -bootfile ${bootfile}"
            ignoreExitValue = true
        }

        // Create FD
        exec {
            commandLine mycmd,  myflag, "objy createfd -fdname ${fdname} -fdDirHost ${fddirhost} -fdDirPath ${fddirpath} -jnlDirHost ${jnldirhost} -jnlDirPath ${jnldirpath}"
            ignoreExitValue = true
        }
    }
}


// Load the schema into the federation.
task loadSchema () {

    doLast{
        println("Loading core schema file: ${SCHEMA_FILE}")
        exec {
            commandLine mycmd, myflag, "objy DO -infile ${SCHEMA_FILE} -bootfile ${bootfile}"
            ignoreExitValue = true
        }

    }
}



//task applyPMD () {
//    doLast{
//        exec {
//            commandLine mycmd, myflag, "objy importPlacement -infile ${PMD_FILE} -bootfile ${bootfile}"
//            ignoreExitValue = true
//        }
//    }
//}

task run2a() {

    doLast{
	println("Running 'run2a'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02a"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}

task run2b() {

    doLast{
	println("Running 'run2b'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02b"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}

task run2c() {

    doLast{
	println("Running 'run2c'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02c"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}


task run2d() {

    doLast{
	println("Running 'run2d'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02d"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}

task run2e() {

    doLast{
	println("Running 'run2e'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02e"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}

task run2f() {

    doLast{
	println("Running 'run2f'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02f"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}

task run2g() {

    doLast{
	println("Running 'run2g'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02g"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}

task run2h() {

    doLast{
	println("Running 'run2h'")
        println("LIB_DIR = ${LIB_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02h"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}


task run2i() {

    doLast{
	println("Running 'run2i'")
        println("LIB_DIR = ${LIB_DIR}")
        println("PROJECT_DIR = ${PROJECT_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02i"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}



task run2j() {

    doLast{
	println("Running 'run2j'")
        println("LIB_DIR = ${LIB_DIR}")
        println("PROJECT_DIR = ${PROJECT_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02j"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}


task run2k() {

    doLast{
	println("Running 'run2k'")
        println("LIB_DIR = ${LIB_DIR}")
        println("PROJECT_DIR = ${PROJECT_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02k"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}

task run2l() {

    doLast{
	println("Running 'run2l'")
        println("LIB_DIR = ${LIB_DIR}")
        println("PROJECT_DIR = ${PROJECT_DIR}")
        javaexec{
            classpath("${LIB_DIR}/JavaULB_${LAB_NAME}-1.0-SNAPSHOT-all.jar",
                     "${objyHome}/lib/objydb-core-${objyVersion}.jar")
            jvmArgs = [\
            "-Xmx8G", \
            "-DBOOT_FILE=${bootfile}", \
            "-Dlog4j.configuration=file:${PROJECT_DIR}/properties/log4j.properties"
            ]
            main = "com.objy.javaulb.labs.lab02.Lab02l"
            standardInput = System.in
            if (project.hasProperty('args')) {
                    args(args.split(','))
            }
        }
    }
}



def makeDir(dirPath){
    def folder = new File(dirPath)
    if(!folder.exists()){
        folder.mkdirs()
    }
}                                                                                                                                                                                                                            







// Note: "common.gradle" in the root project contains additional initialization
//   for this project. This initialization is applied in the "build.gradle"
//   of the root project.

// NetBeans will automatically add "run" and "debug" tasks relying on the
// "mainClass" property. You may however define the property prior executing
// tasks by passing a "-PmainClass=<QUALIFIED_CLASS_NAME>" argument.
//
// Note however, that you may define your own "run" and "debug" task if you
// prefer. In this case NetBeans will not add these tasks but you may rely on
// your own implementation.
//if (!hasProperty('mainClass')) {
//    ext.mainClass = 'com.objy.javaulb.labs.lab01.Lab01'
//}
